trigger:
  branches:
    include:
      - main
      - rc/*
      - develop
      - feature/*
  paths:
    exclude:
      - Worker.ConnectedVehicle.Logger
      - Worker.ConnectedVehicle.MinuteTotals
      - Worker.ConnectedVehicle.PurgeArchive
      - Worker.ConnectedVehicle.PurgeLog
      - DockerfileMinuteTotals
      - DockerfileLogger
      - DockerfilePurgeArchive
      - DockerfilePurgeLog
      - azure-pipelines-logger.yml
      - azure-pipelines-minute-totals.yml
      - azure-pipelines-purge-archive.yml
      - azure-pipelines-purge-log.yml
      - Simulator.ConnectedVehicleArchiver
      - Simulator.ConnectedVehicleConsumer
      - Simulator.ConnectedVehicleMinuteTotalsWorkerTimer
      - Simulator.ConnectedVehicleProducer
      - devops/logger
      - devops/totals
      - devops/purge-archive
      - devops/purge-log
      - azure-pipelines-sim-producer.yml
      - devops/sim-producer

variables:
  # Version information
  - name: version.major
    value: 1
  - name: version.minor
    value: 0

    # Name for the container publish to be used by release
  - name: imageRepository
    value: "ode-cv-archive-logger-service"
    # Path from root where Dockerfile lives
  - name: dockerfilePath
    value: "./$(Build.Repository.Name)/DockerfileArchiveLogger"

    # Container registry service connection established during pipeline creation
  # - group: Azure Artifacts
  - name: dockerRegistryServiceConnection
    value: "bf0a15b0-1048-4382-ad57-fbcd0cd84622"
  - name: containerRegistry
    value: "cosysdev.azurecr.io"
    # Agent VM image name
  - name: vmImageName
    value: "ubuntu-latest"

resources:
  repositories:
    - repository: templates
      type: git
      name: DevOps/templates
      ref: refs/tags/1.2

stages:
  # Versioning master branch builds
  - template: buildversion.yml@templates
    parameters:
      major: $(version.major)
      minor: $(version.minor)

  # Building and pushing contianer
  - stage: Build
    displayName: Build and push stage
    condition: always()
    jobs:
      - job:
        displayName: Build
        pool:
          vmImage: $(vmImageName)
        steps:
          - checkout: self
            submodules: true
            persistCredentials: true
          - checkout: templates
          - task: Bash@3
            displayName: Version Files
            inputs:
              filePath: "templates/versionfiles.sh"
              workingDirectory: "templates"

          - task: Docker@2
            displayName: Build docker
            inputs:
              containerRegistry: "$(dockerRegistryServiceConnection)"
              repository: "$(imageRepository)"
              command: "build"
              Dockerfile: "$(dockerfilePath)"
              tags: "$(Build.BuildNumber)"
              # arguments: '--build-arg PAT=$(artifacts.pat) --build-arg FEED_URL=$(artifacts.feed) --build-arg BUILD_TARGET=release'
              buildContext: "./$(Build.Repository.Name)/"
          - task: Docker@2
            displayName: Push docker image to Registry
            # Example if we wanted to filter pushing images to only be done for master
            # condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
            inputs:
              containerRegistry: "Docker Container Registry"
              repository: "$(imageRepository)"
              command: "push"
              tags: "$(Build.BuildNumber)"
        # Publish helm files for the release
          - task: PublishPipelineArtifact@1
            displayName: 'Publish Helm Artifact for Release'
            inputs:
              targetPath: './$(Build.Repository.Name)/devops/archive/helm-charts'
              artifact: drop
